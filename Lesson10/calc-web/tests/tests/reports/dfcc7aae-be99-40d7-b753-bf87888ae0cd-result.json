{"name": "test_additionPositiveNumbers_SuccessfulLoginAndValidResult", "status": "broken", "statusDetails": {"message": "TypeError: CalculatorTests.setup_method() takes 1 positional argument but 2 were given", "trace": "cls = <class '_pytest.runner.CallInfo'>\nfunc = <function call_runtest_hook.<locals>.<lambda> at 0x000001F78EA06520>\nwhen = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\_pytest\\runner.py:341: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\_pytest\\runner.py:262: in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\pluggy\\_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\pluggy\\_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\_pytest\\runner.py:157: in pytest_runtest_setup\n    item.session._setupstate.setup(item)\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\_pytest\\runner.py:497: in setup\n    raise exc\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\_pytest\\runner.py:494: in setup\n    col.setup()\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\_pytest\\unittest.py:204: in setup\n    self._request._fillfixtures()\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\_pytest\\fixtures.py:566: in _fillfixtures\n    item.funcargs[argname] = self.getfixturevalue(argname)\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\_pytest\\fixtures.py:585: in getfixturevalue\n    fixturedef = self._get_active_fixturedef(argname)\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\_pytest\\fixtures.py:607: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\_pytest\\fixtures.py:693: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\_pytest\\fixtures.py:1069: in execute\n    result = ihook.pytest_fixture_setup(fixturedef=self, request=request)\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\pluggy\\_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\pluggy\\_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\_pytest\\fixtures.py:1123: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\_pytest\\fixtures.py:895: in call_fixture_func\n    fixture_result = next(generator)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_calc.CalculatorTests testMethod=test_additionPositiveNumbers_SuccessfulLoginAndValidResult>\nrequest = <SubRequest '_unittest_setup_method_fixture_CalculatorTests' for <TestCaseFunction test_additionPositiveNumbers_SuccessfulLoginAndValidResult>>\n\n    @pytest.fixture(\n        scope=scope.value,\n        autouse=True,\n        # Use a unique name to speed up lookup.\n        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        if _is_skipped(self):\n            reason = self.__unittest_skip_why__\n            raise pytest.skip.Exception(reason, _use_item_location=True)\n        if setup is not None:\n            try:\n                if pass_self:\n>                   setup(self, request.function)\nE                   TypeError: CalculatorTests.setup_method() takes 1 positional argument but 2 were given\n\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\_pytest\\unittest.py:155: TypeError"}, "start": 1745335847118, "stop": 1745335847118, "uuid": "ce921c21-16f8-40de-8611-f2adbbc59baf", "historyId": "f6db8d2b74af86c9b95e562611378081", "testCaseId": "f6db8d2b74af86c9b95e562611378081", "fullName": "tests.test_calc.CalculatorTests#test_additionPositiveNumbers_SuccessfulLoginAndValidResult", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_calc"}, {"name": "subSuite", "value": "CalculatorTests"}, {"name": "host", "value": "User-PC"}, {"name": "thread", "value": "42192-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_calc"}]}