{"name": "test_subtractionPositiveNumbersResultPositiveNumber_SuccessfulLoginAndValidResult", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\n  (Session info: chrome=135.0.7049.96)\nStacktrace:\n\tGetHandleVerifier [0x00007FF61ABA5305+78597]\n\tGetHandleVerifier [0x00007FF61ABA5360+78688]\n\t(No symbol) [0x00007FF61A958FDC]\n\t(No symbol) [0x00007FF61A9A46A5]\n\t(No symbol) [0x00007FF61A9D70EA]\n\t(No symbol) [0x00007FF61A9A1AB6]\n\t(No symbol) [0x00007FF61A9D7300]\n\t(No symbol) [0x00007FF61A9FF2BB]\n\t(No symbol) [0x00007FF61A9D6EC3]\n\t(No symbol) [0x00007FF61A9A03F8]\n\t(No symbol) [0x00007FF61A9A1163]\n\tGetHandleVerifier [0x00007FF61AE4EEBD+2870973]\n\tGetHandleVerifier [0x00007FF61AE49668+2848360]\n\tGetHandleVerifier [0x00007FF61AE66943+2967875]\n\tGetHandleVerifier [0x00007FF61ABC014A+188746]\n\tGetHandleVerifier [0x00007FF61ABC842F+222255]\n\tGetHandleVerifier [0x00007FF61ABAD284+111236]\n\tGetHandleVerifier [0x00007FF61ABAD432+111666]\n\tGetHandleVerifier [0x00007FF61AB93559+5465]\n\tBaseThreadInitThunk [0x00007FF8BF3B7374+20]\n\tRtlUserThreadStart [0x00007FF8C11DCC91+33]", "trace": "self = <test_calc.TestCalculate object at 0x0000022826D907D0>\n\n    def test_subtractionPositiveNumbersResultPositiveNumber_SuccessfulLoginAndValidResult(self):\n        logging.info('trying to log in as valid user')\n        self.login_page.log_in('admin', '123')\n        logging.info('trying to add up for positive numbers')\n>       self.calculator_page.calc_subtraction('10', '-', '3' )\n\ntest_calc.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\calculator_page.py:21: in calc_subtraction\n    self.set_operation('-')\npages\\calculator_page.py:32: in set_operation\n    operation.clear()\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:154: in clear\n    self._execute(Command.CLEAR_ELEMENT)\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022825A880B0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"invalid element state\\\\n  (Session info...1AB93559+5465]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8BF3B7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF8C11DCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\nE         (Session info: chrome=135.0.7049.96)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF61ABA5305+78597]\nE       \tGetHandleVerifier [0x00007FF61ABA5360+78688]\nE       \t(No symbol) [0x00007FF61A958FDC]\nE       \t(No symbol) [0x00007FF61A9A46A5]\nE       \t(No symbol) [0x00007FF61A9D70EA]\nE       \t(No symbol) [0x00007FF61A9A1AB6]\nE       \t(No symbol) [0x00007FF61A9D7300]\nE       \t(No symbol) [0x00007FF61A9FF2BB]\nE       \t(No symbol) [0x00007FF61A9D6EC3]\nE       \t(No symbol) [0x00007FF61A9A03F8]\nE       \t(No symbol) [0x00007FF61A9A1163]\nE       \tGetHandleVerifier [0x00007FF61AE4EEBD+2870973]\nE       \tGetHandleVerifier [0x00007FF61AE49668+2848360]\nE       \tGetHandleVerifier [0x00007FF61AE66943+2967875]\nE       \tGetHandleVerifier [0x00007FF61ABC014A+188746]\nE       \tGetHandleVerifier [0x00007FF61ABC842F+222255]\nE       \tGetHandleVerifier [0x00007FF61ABAD284+111236]\nE       \tGetHandleVerifier [0x00007FF61ABAD432+111666]\nE       \tGetHandleVerifier [0x00007FF61AB93559+5465]\nE       \tBaseThreadInitThunk [0x00007FF8BF3B7374+20]\nE       \tRtlUserThreadStart [0x00007FF8C11DCC91+33]\n\nC:\\Users\\User\\anaconda3\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidElementStateException"}, "attachments": [{"name": "log", "source": "063053e0-adca-47e8-abbc-e9aadb2b1add-attachment.txt", "type": "text/plain"}], "start": 1745393417763, "stop": 1745393418405, "uuid": "632003e4-d6c6-4bba-b473-0c0a9d7e773b", "historyId": "121a125eaa772fa8b18669ad70230d38", "testCaseId": "121a125eaa772fa8b18669ad70230d38", "fullName": "tests.test_calc.TestCalculate#test_subtractionPositiveNumbersResultPositiveNumber_SuccessfulLoginAndValidResult", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_calc"}, {"name": "subSuite", "value": "TestCalculate"}, {"name": "host", "value": "User-PC"}, {"name": "thread", "value": "11280-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_calc"}]}